I"
F<blockquote>
  <p>这几天过年啊，过年就不想学啊。。。</p>

  <p>这也是没办法的事嘛，这两天的题其实有几个可以写一写，不过多是昨天的CF题，明天再把那一套补一补吧。。。。还有FFT。。。。</p>

  <p>又要咕CSAPP。。。</p>
</blockquote>

<h2 id="hdu-4911-inversion">HDU-4911 Inversion</h2>

<p>后来想想其实不难看出，只交换相邻两项的话，最多只能去掉一个逆序对。。而且一定能去掉一个逆序对。。。</p>

<p>所以这个问题变成了如何求逆序对。。。</p>

<p>上网一查需要树状数组，看懂了后发现这个题给的 <strong>a</strong> 是1e9大小。。。</p>

<p>所以很自然的就想到了离散化，巧了，离散化我会啊233333</p>

<p>但是写得第一个版本竟然被t了，我还不知道为什么，又是玄学问题艹艹艹，因为我按原思路又写了一遍就过了，这不是玄学是什么</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
#define ll long long
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="o">=</span><span class="mf">1e5</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span>
<span class="k">struct</span> <span class="nc">node</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">p</span><span class="p">;</span>
    <span class="n">ll</span> <span class="n">v</span><span class="p">;</span>
<span class="p">}</span><span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">c</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">bool</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">node</span> <span class="n">n</span><span class="p">,</span><span class="n">node</span> <span class="n">m</span><span class="p">){</span>
    <span class="k">return</span> <span class="n">n</span><span class="p">.</span><span class="n">v</span><span class="o">&lt;</span><span class="n">m</span><span class="p">.</span><span class="n">v</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">lowbit</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="k">return</span> <span class="n">x</span><span class="o">&amp;</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">x</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">+=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
        <span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">ll</span> <span class="nf">ask</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ll</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">x</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">-=</span><span class="n">lowbit</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
        <span class="n">ans</span><span class="o">+=</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    <span class="n">ll</span> <span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">h</span><span class="p">));</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">v</span><span class="p">;</span>
            <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">p</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">a</span><span class="o">+</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">cmp</span><span class="p">);</span>
        <span class="n">c</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">p</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">v</span><span class="o">==</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">v</span><span class="p">){</span>
                <span class="n">c</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">p</span><span class="p">]</span><span class="o">=</span><span class="n">c</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">p</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="n">c</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">p</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">ll</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">ans</span><span class="o">+=</span><span class="n">ask</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">add</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="o">-</span><span class="n">k</span><span class="p">,(</span><span class="n">ll</span><span class="p">)</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="hdu-1506-largest-rectangle-in-a-histogram">HDU-1506 Largest Rectangle in a Histogram</h2>

<blockquote>
  <p>原本想做完这个题就去打游戏，结果从b站看雪乃看到忘记时间。。。然后他们就ak了。。。。艹</p>
</blockquote>

<p>这个题可以dp可以单调栈，其实性质差不多啦，这个单调栈真的很像dp。。。</p>

<p>看单调栈得博客真的把我看懵了，还是直接看代码好理解。。</p>

<p>首先先引入一个概念叫宽度，在这个题中，对于一个小区间的矩形，它的左边高于它的矩形的个数加上1（它自身）就是它的左宽，右边高于它的矩形的个数就是它的右宽</p>

<p>这个题让求最大的矩形嘛，其实换个思路，枚举每一个小区间的矩形，这个矩形所形成的最大矩形就是它的总宽乘上高度，所以找所有矩形中最大的那个就行了</p>

<p>但是这样直接找复杂度不稳定，随便一卡就超时，于是就用到了单调栈，因为（递增）单调栈有这些性质：</p>

<ol>
  <li>从左到右单调递增</li>
  <li>如果当前读到的元素大于栈顶元素就直接插入，而且它的左宽为1（它自身）</li>
  <li>如果当前读到的元素小于栈顶元素就将栈里大于当前元素的元素都出栈</li>
  <li>第一个出栈元素的右宽一定为0</li>
  <li>后面出栈元素的右宽为前一个出栈元素的总宽</li>
  <li>找到第一个栈顶元素小于当前元素后，当前元素入栈，左宽为直方图中它到第一个小于当前元素中所有元素的个数加上它本身，即最后一个出栈元素的总宽加上1（它自身）</li>
</ol>

<p>有了这些就可以做出来这个题啦</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
#define ll long long
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="o">=</span><span class="mf">1e5</span><span class="o">+</span><span class="mi">5</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">w</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>   <span class="c1">//左宽</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="k">break</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">top</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="o">-</span><span class="mh">0x3f</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">w</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">w</span><span class="p">));</span>
        <span class="n">ll</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">h</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="o">&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">top</span><span class="p">]){</span>
                <span class="n">a</span><span class="p">[</span><span class="o">++</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="n">h</span><span class="p">;</span>
                <span class="n">w</span><span class="p">[</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>  <span class="c1">//当前右宽，前一个总宽</span>
                <span class="k">while</span><span class="p">(</span><span class="n">h</span><span class="o">&lt;=</span><span class="n">a</span><span class="p">[</span><span class="n">top</span><span class="p">]){</span>
                    <span class="n">ans</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,(</span><span class="n">ll</span><span class="p">)(</span><span class="n">w</span><span class="p">[</span><span class="n">top</span><span class="p">]</span><span class="o">+</span><span class="n">cnt</span><span class="p">)</span><span class="o">*</span><span class="n">a</span><span class="p">[</span><span class="n">top</span><span class="p">]);</span>
                    <span class="n">cnt</span><span class="o">+=</span><span class="n">w</span><span class="p">[</span><span class="n">top</span><span class="o">--</span><span class="p">];</span><span class="c1">//当前右宽等于前一个</span>
                <span class="p">}</span>                 <span class="c1">//右宽加上前一个左宽</span>
                <span class="n">a</span><span class="p">[</span><span class="o">++</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="n">h</span><span class="p">;</span>
                <span class="n">w</span><span class="p">[</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET